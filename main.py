import json
import logging
import os
from datetime import date

from aiogram import Bot, Dispatcher, types, executor

# Logger initialization and logging level setting
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# Vars
count_scooters = 0
count_parking = 0
working_zone = '–ö—Ä–∞—Å–Ω–∞—è'

words_to_process = [
    '—Ç—Å',
    '—Å—Ç',
    'scooter',
    'ts',
    'sctr',
    '—Å–∞–º–æ–∫–∞—Ç',
    '–ø–æ–ø—Ä–∞–≤–∏–ª',
    '–ø–æ–¥–≤—ë–∑',
    '–ø–æ–¥–≤–µ–∑',
    '–ø–æ–¥–Ω—è–ª',
    '–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª',
]


# Handlers
async def start(message: types.Message):
    global working_zone
    start_shift_text = f"#—Å–º–µ–Ω–∞ {date.today().strftime('%d.%m.%Y')}\n–Ω–∞—á–∞–ª\n‚Ä¢ –ó–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã: {working_zone}\n"
    # todo: –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—à–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç —Å–∫–∞—É—Ç–æ–≤
    # todo: —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä (–µ—Å–ª–∏ —Ç–∞–∫ –º–æ–∂–Ω–æ)
    await message.answer(start_shift_text)


async def process_scooters(message: types.Message):
    global count_scooters, count_parking
    pieces = message.text.split()
    if pieces[0].lower() in words_to_process and pieces[1].isdigit():

        count_parking += 1
        count_scooters += int(pieces[1])
        msg = f'‚úÖüõ¥ {pieces[1]} –¢–° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ.\n‚úÖüÖøÔ∏è  –ü–∞—Ä–∫–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.'
        # todo: –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–≤–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å (–∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –±–¥, –∑–∞–ø–∏—Å—ã–≤–∞–π —Å –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π message_id –∏–ª–∏ –¥—Ä—É–≥–æ–π id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ –Ω–µ–º—É —É–¥–∞–ª—è—Ç—å –∏–∑ –±–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ: –±–µ—Ä–µ–º —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, –ø–∞—Ä—Å–∏–º –µ–µ —Ç–µ–∫—Å—Ç –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–µ —Ç—Å, –Ω–æ —Ç–æ–≥–¥–∞ –±–ª –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –∏–∑ UNSIGNED TINYINT | INT32)
        await message.answer(msg)

async def instructions(message: types.Message):
    description = '–û–ø–∏—Å–∞–Ω–∏–µ:\n\t–ë–æ—Ç –¥–ª—è —Å—á—ë—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¢–° –∏ –ø–∞—Ä–∫–æ–≤–æ–∫.\n\r'
    how_to_shift = '–ö–∞–∫ –Ω–∞—á–∏–Ω–∞—Ç—å –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —Å–º–µ–Ω—É:\n\t–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É: –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é "–Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É" –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "/start".\n\t–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É: –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é "–∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É"(–∫–æ–º–∞–Ω–¥–∞ "/end_shift")\n\r'
    # todo: (–≤—ã—à–µ) —Ç–æ–∂–µ —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—á–µ–º—É —ç—Ç–æ –°–¢–û–ò–¢ –¥–µ–ª–∞—Ç—å –≤ –±–æ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω —ç–∫–æ–Ω–æ–º–∏—Ç, –ø—É—Å—Ç—å —Å–∞–º–∏ –ø–æ–ø—Ä–æ–±—É—é—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏ –ø—Ä–æ–π–¥—É—Ç –æ–ø—Ä–æ—Å —Ç–≥, —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å—ã, —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –±–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ—Ç–∫–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –µ—Å–ª–∏ —É –Ω–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ —É –∫–æ–≥–æ (–∏–ª–∏ @—Ä–∞–∑—Ä–∞–± –Ω–∞–∫–æ—Å—è—á–∏–ª)
    # todo: (–≤—ã—à–µ—Ö2) –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–æ—Ç–æ–º, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≥ –¥–ª—è —Å–≤–æ–∏—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    how_to_write_ts = f'\t–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å:\n\t\t+üõ¥üÖøÔ∏è –ù–∞–ø–∏—à–∏ "—Ç—Å <—á–∏—Å–ª–æ>". –¢–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Å –∏ –æ–¥–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞.\n\t\tüõ†–ï—Å–ª–∏ —É —Ç–µ–±—è —Å–∞–º–æ–∫–∞—Çüõ¥ –Ω–∞ üõ†—Ä–µ–º–æ–Ω—Ç, –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É "—Å–±–æ—Ä, —Ä–µ–º–æ–Ω—Ç". –¢–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç—Å, –±–µ–∑ –ø–∞—Ä–∫–æ–≤–∫–∏ (—Ç–∞–∫ –∏ –Ω–∞–¥–æ)\n\r' #todo: –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –µ—Ä–∞—Ç–∫—É—é, –≥–¥–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä—ã —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ, –≥–¥–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã –∏ –∫ –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–ª—è –±–∞–≥–æ–≤ –∏ –≤—Ü–µ–ª–æ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    final_instr = description + how_to_shift + how_to_write_ts
    how_to_get_shift_stats = '' # todo: –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
    await message.answer(text=final_instr)

async def repair(message: types.Message):
    global count_scooters
    count_scooters += 1
    repair_text = f'‚úÖüõ†üõ¥ 1 –¢–° –û–±—Ä–∞–±–æ—Ç–∞–Ω.'
    await message.answer(repair_text)


async def stats():
    global count_scooters, count_parking
    return f'‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä–∫–æ–≤–æ–∫: {count_parking}\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–° –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count_scooters}'


async def shift_stats(message: types.Message):
    await message.answer(text=await stats())


async def end_shift(message: types.Message):
    end_shift_text = f"#—Å–º–µ–Ω–∞ {date.today().strftime('%d.%m.%Y')}\n–∑–∞–≤–µ—Ä—à–∏–ª\n‚Ä¢ –ó–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã: {working_zone}\n" + await stats()
    await message.answer(end_shift_text)
    global count_scooters, count_parking
    count_scooters = 0
    count_parking = 0


# Functions for Yandex.Cloud
# async def register_handlers(dp: Dispatcher):
#     """Registration all handlers before processing update."""
#
#     dp.register_message_handler(start, commands=['start'])
#     dp.register_message_handler(process_scooters)
#     dp.register_message_handler(instructions, commands=['help'])
#     dp.register_message_handler(repair, commands='repair')
#     dp.register_message_handler(shift_stats, commands=['stats'])
#     dp.register_message_handler(end_shift, commands=['end_shift'])
#
#     log.debug('Handlers are registered.')


async def process_event(event, dp: Dispatcher):
    """
    Converting an Yandex.Cloud functions event to an update and
    handling tha update.
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))

    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    await dp.process_update(update)


# async def handler(event, context):
#     """Yandex.Cloud functions handler."""
#
#     if event['httpMethod'] == 'POST':
#         # Bot and dispatcher initialization
#         bot = Bot(os.environ.get('TOKEN'))
#         dp = Dispatcher(bot)
#
#         await register_handlers(dp)
#         await process_event(event, dp)
#
#         return {'statusCode': 200, 'body': 'ok'}
#     return {'statusCode': 405}

if __name__ == '__main__':
    bot = Bot("6057374188:AAER_-4JpcIp3w4IbcDUBrMnm0RCen2RKKI")
    dp = Dispatcher(bot)

    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(instructions, commands=['help'])
    dp.register_message_handler(repair, commands='repair')
    dp.register_message_handler(shift_stats, commands=['stats'])
    dp.register_message_handler(end_shift, commands=['end_shift'])
    dp.register_message_handler(process_scooters)

    log.debug('Handlers are registered.')

    executor.start_polling(dp)

